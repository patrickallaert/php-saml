<?php
namespace OneLogin\Saml2;

use Exception;
use RobRichards\XMLSecLibs\XMLSecurityKey;

/**
 * Main class of OneLogin's PHP Toolkit
 */
class Auth
{
    /**
     * @var Settings
     */
    private $settings;

    /**
     * User attributes data.
     *
     * @var array
     */
    private $attributes = [];

    /**
     * User attributes data with FriendlyName index.
     *
     * @var array
     */
    private $attributesWithFriendlyName = [];

    /**
     * @var ?string
     */
    private $nameId;

    /**
     * @var ?string
     */
    private $nameIdFormat;

    /**
     * @var ?string
     */
    private $nameIdNameQualifier;

    /**
     * @var ?string
     */
    private $nameIdSPNameQualifier;

    /**
     * @var bool
     */
    private $authenticated = false;


    /**
     * SessionIndex. When the user is logged, this stored it
     * from the AuthnStatement of the SAML Response
     *
     * @var ?string
     */
    private $sessionIndex;

    /**
     * SessionNotOnOrAfter. When the user is logged, this stored it
     * from the AuthnStatement of the SAML Response
     *
     * @var int|null
     */
    private $sessionExpiration;

    /**
     * The ID of the last message processed
     *
     * @var ?string
     */
    private $lastMessageId;

    /**
     * The ID of the last assertion processed
     *
     * @var ?string
     */
    private $lastAssertionId;

    /**
     * The NotOnOrAfter value of the valid SubjectConfirmationData
     * node (if any) of the last assertion processed
     *
     * @var int
     */
    private $lastAssertionNotOnOrAfter;

    /**
     * If any error.
     *
     * @var string[]
     */
    private $errors = [];

    /**
     * Last error object.
     *
     * @var ?Exception
     */
    private $lastErrorException;

    /**
     * Last AuthNRequest ID or LogoutRequest ID generated by this Service Provider
     *
     * @var string
     */
    private $lastRequestID;

    /**
     * Initializes the SP SAML instance.
     *
     * @param array|null $settings Setting data
     */
    public function __construct(array $settings = null)
    {
        $this->settings = new Settings($settings);
    }

    public function getSettings(): Settings
    {
        return $this->settings;
    }

    /**
     * Set the strict mode active/disable
     */
    public function setStrict(bool $value)
    {
        $this->settings->setStrict($value);
    }

    /**
     * Process the SAML Response sent by the IdP.
     *
     * @param string|null $requestId The ID of the AuthNRequest sent by this SP to the IdP
     *
     * @throws Error
     * @throws ValidationError
     */
    public function processResponse($requestId = null)
    {
        $this->errors = [];
        $this->lastErrorException = null;
        if (isset($_POST['SAMLResponse'])) {
            // AuthnResponse -- HTTP_POST Binding
            $response = new Response($this->settings, $_POST['SAMLResponse']);

            if ($response->isValid($requestId)) {
                $this->attributes = $response->getAttributes();
                $this->attributesWithFriendlyName = $response->getAttributesWithFriendlyName();
                $this->nameId = $response->getNameId();
                $this->nameIdFormat = $response->getNameIdFormat();
                $this->nameIdNameQualifier = $response->getNameIdNameQualifier();
                $this->nameIdSPNameQualifier = $response->getNameIdSPNameQualifier();
                $this->authenticated = true;
                $this->sessionIndex = $response->getSessionIndex();
                $this->sessionExpiration = $response->getSessionNotOnOrAfter();
                $this->lastMessageId = $response->getId();
                $this->lastAssertionId = $response->getAssertionId();
                $this->lastAssertionNotOnOrAfter = $response->getAssertionNotOnOrAfter();
            } else {
                $this->errors[] = 'invalid_response';
                $this->lastErrorException = $response->getErrorException();
            }
        } else {
            $this->errors[] = 'invalid_binding';
            throw new Error(
                'SAML Response not found, Only supported HTTP_POST Binding',
                Error::SAML_RESPONSE_NOT_FOUND
            );
        }
    }

    /**
     * Process the SAML Logout Response / Logout Request sent by the IdP.
     *
     * @param bool        $keepLocalSession             When false will destroy the local session, otherwise will keep it
     * @param string|null $requestId                    The ID of the LogoutRequest sent by this SP to the IdP
     * @param bool        $retrieveParametersFromServer True if we want to use parameters from $_SERVER to validate the signature
     * @param callable    $cbDeleteSession              Callback to be executed to delete session
     * @param bool        $stay                         True if we want to stay (returns the url string) False to redirect
     *
     * @return string|null
     *
     * @throws Error
     */
    public function processSLO($keepLocalSession = false, $requestId = null, $retrieveParametersFromServer = false, $cbDeleteSession = null, $stay = false)
    {
        $this->errors = [];
        $this->lastErrorException = null;
        if (isset($_GET['SAMLResponse'])) {
            $logoutResponse = new LogoutResponse($this->settings, $_GET['SAMLResponse']);
            if (!$logoutResponse->isValid($requestId, $retrieveParametersFromServer)) {
                $this->errors[] = 'invalid_logout_response';
                $this->lastErrorException = $logoutResponse->getErrorException();
            } elseif ($logoutResponse->getStatus() !== Constants::STATUS_SUCCESS) {
                $this->errors[] = 'logout_not_success';
            } else {
                $this->lastMessageId = $logoutResponse->id;
                if (!$keepLocalSession) {
                    if ($cbDeleteSession === null) {
                        Utils::deleteLocalSession();
                    } else {
                        call_user_func($cbDeleteSession);
                    }
                }
            }
        } elseif (isset($_GET['SAMLRequest'])) {
            $logoutRequest = new LogoutRequest($this->settings, $_GET['SAMLRequest']);
            if (!$logoutRequest->isValid($retrieveParametersFromServer)) {
                $this->errors[] = 'invalid_logout_request';
                $this->lastErrorException = $logoutRequest->getErrorException();
            } else {
                if (!$keepLocalSession) {
                    if ($cbDeleteSession === null) {
                        Utils::deleteLocalSession();
                    } else {
                        call_user_func($cbDeleteSession);
                    }
                }
                $this->lastMessageId = $logoutRequest->id;
                $responseBuilder = new LogoutResponse($this->settings);
                $responseBuilder->build($logoutRequest->id);

                $logoutResponse = $responseBuilder->getResponse();

                $parameters = ['SAMLResponse' => $logoutResponse];
                if (isset($_GET['RelayState'])) {
                    $parameters['RelayState'] = $_GET['RelayState'];
                }

                $security = $this->settings->getSecurityData();
                if (isset($security['logoutResponseSigned']) && $security['logoutResponseSigned']) {
                    $parameters['SigAlg'] = $security['signatureAlgorithm'];
                    $parameters['Signature'] = $this->buildResponseSignature($logoutResponse, isset($parameters['RelayState']) ? $parameters['RelayState'] : null, $security['signatureAlgorithm']);
                }

                return $this->redirectTo($this->getSLOurl(), $parameters, $stay);
            }
        } else {
            $this->errors[] = 'invalid_binding';
            throw new Error(
                'SAML LogoutRequest/LogoutResponse not found. Only supported HTTP_REDIRECT Binding',
                Error::SAML_LOGOUTMESSAGE_NOT_FOUND
            );
        }
    }

    /**
     * Redirects the user to the url past by parameter
     * or to the url that we defined in our SSO Request.
     *
     * @param string $url        The target URL to redirect the user.
     * @param array  $parameters Extra parameters to be passed as part of the url
     * @param bool   $stay       True if we want to stay (returns the url string) False to redirect
     *
     * @return string|null
     */
    public function redirectTo(string $url = '', array $parameters = [], bool $stay = false)
    {
        if (empty($url) && isset($_REQUEST['RelayState'])) {
            $url = $_REQUEST['RelayState'];
        }

        return Utils::redirect($url, $parameters, $stay);
    }

    public function isAuthenticated(): bool
    {
        return $this->authenticated;
    }

    public function getAttributes(): array
    {
        return $this->attributes;
    }

    public function getAttributesWithFriendlyName(): array
    {
        return $this->attributesWithFriendlyName;
    }

    public function getNameId(): ?string
    {
        return $this->nameId;
    }

    public function getNameIdFormat(): ?string
    {
        return $this->nameIdFormat;
    }

    public function getNameIdNameQualifier(): ?string
    {
        return $this->nameIdNameQualifier;
    }

    public function getNameIdSPNameQualifier(): ?string
    {
        return $this->nameIdSPNameQualifier;
    }

    public function getSessionIndex(): ?string
    {
        return $this->sessionIndex;
    }

    /**
     * Returns the SessionNotOnOrAfter
     *
     * @return int|null  The SessionNotOnOrAfter of the assertion
     */
    public function getSessionExpiration()
    {
        return $this->sessionExpiration;
    }

    /**
     * Returns if there were any error
     *
     * @return array  Errors
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * Returns the last error
     *
     * @return Exception|null Error
     */
    public function getLastErrorException()
    {
        return $this->lastErrorException;
    }

    public function getAttribute(string $name): ?array
    {
        if (isset($this->attributes[$name])) {
            return $this->attributes[$name];
        }
        return null;
    }

    public function getAttributeWithFriendlyName(string $friendlyName): ?array
    {
        $value = null;
        if (isset($this->attributesWithFriendlyName[$friendlyName])) {
            return $this->attributesWithFriendlyName[$friendlyName];
        }
        return $value;
    }

    /**
     * Initiates the SSO process.
     *
     * @param string|null $returnTo        The target URL the user should be returned to after login.
     * @param array       $parameters      Extra parameters to be added to the GET
     * @param bool        $forceAuthn      When true the AuthNRequest will set the ForceAuthn='true'
     * @param bool        $isPassive       When true the AuthNRequest will set the Ispassive='true'
     * @param bool        $stay            True if we want to stay (returns the url string) False to redirect
     * @param bool        $setNameIdPolicy When true the AuthNRequest will set a nameIdPolicy element
     *
     * @return string|null If $stay is True, it return a string with the SLO URL + LogoutRequest + parameters
     *
     * @throws Error
     */
    public function login(?string $returnTo = null, array $parameters = [], bool $forceAuthn = false, bool $isPassive = false, bool $stay = false, bool $setNameIdPolicy = true)
    {
        $authnRequest = new AuthnRequest($this->settings, $forceAuthn, $isPassive, $setNameIdPolicy);

        $this->lastRequestID = $authnRequest->getId();

        $samlRequest = $authnRequest->getRequest();
        $parameters['SAMLRequest'] = $samlRequest;

        if (!empty($returnTo)) {
            $parameters['RelayState'] = $returnTo;
        } else {
            $parameters['RelayState'] = Utils::getSelfRoutedURLNoQuery();
        }

        $security = $this->settings->getSecurityData();
        if (isset($security['authnRequestsSigned']) && $security['authnRequestsSigned']) {
            $parameters['SigAlg'] = $security['signatureAlgorithm'];
            $parameters['Signature'] = $this->buildRequestSignature($samlRequest, $parameters['RelayState'], $security['signatureAlgorithm']);
        }
        return $this->redirectTo($this->getSSOurl(), $parameters, $stay);
    }

    /**
     * Initiates the SLO process.
     *
     * @param string|null $returnTo            The target URL the user should be returned to after logout.
     * @param array       $parameters          Extra parameters to be added to the GET
     * @param string|null $nameId              The NameID that will be set in the LogoutRequest.
     * @param string|null $sessionIndex        The SessionIndex (taken from the SAML Response in the SSO process).
     * @param bool        $stay                True if we want to stay (returns the url string) False to redirect
     * @param string|null $nameIdFormat        The NameID Format will be set in the LogoutRequest.
     * @param string|null $nameIdNameQualifier The NameID NameQualifier will be set in the LogoutRequest.
     *
     * @return string|null If $stay is True, it return a string with the SLO URL + LogoutRequest + parameters
     *
     * @throws Error
     */
    public function logout(?string $returnTo = null, array $parameters = [], ?string $nameId = null, ?string $sessionIndex = null, bool $stay = false, ?string $nameIdFormat = null, ?string $nameIdNameQualifier = null, ?string $nameIdSPNameQualifier = null)
    {
        $sloUrl = $this->getSLOurl();
        if (empty($sloUrl)) {
            throw new Error(
                'The IdP does not support Single Log Out',
                Error::SAML_SINGLE_LOGOUT_NOT_SUPPORTED
            );
        }

        if (empty($nameId) && !empty($this->nameId)) {
            $nameId = $this->nameId;
        }
        if (empty($nameIdFormat) && !empty($this->nameIdFormat)) {
            $nameIdFormat = $this->nameIdFormat;
        }

        $logoutRequest = new LogoutRequest($this->settings, null, $nameId, $sessionIndex, $nameIdFormat, $nameIdNameQualifier, $nameIdSPNameQualifier);

        $this->lastRequestID = $logoutRequest->id;

        $samlRequest = $logoutRequest->getRequest();

        $parameters['SAMLRequest'] = $samlRequest;
        if (!empty($returnTo)) {
            $parameters['RelayState'] = $returnTo;
        } else {
            $parameters['RelayState'] = Utils::getSelfRoutedURLNoQuery();
        }

        $security = $this->settings->getSecurityData();
        if (isset($security['logoutRequestSigned']) && $security['logoutRequestSigned']) {
            $parameters['SigAlg'] = $security['signatureAlgorithm'];
            $parameters['Signature'] = $this->buildRequestSignature($samlRequest, $parameters['RelayState'], $security['signatureAlgorithm']);
        }

        return $this->redirectTo($sloUrl, $parameters, $stay);
    }

    /**
     * Gets the SSO url.
     *
     * @return string The url of the Single Sign On Service
     */
    public function getSSOurl()
    {
        $idpData = $this->settings->getIdPData();
        return $idpData['singleSignOnService']['url'];
    }

    public function getSLOurl(): ?string
    {
        $idpData = $this->settings->getIdPData();
        if (isset($idpData['singleLogoutService']) && isset($idpData['singleLogoutService']['url'])) {
            return $idpData['singleLogoutService']['url'];
        }
        return null;
    }

    /**
     * Gets the ID of the last AuthNRequest or LogoutRequest generated by the Service Provider.
     */
    public function getLastRequestID(): string
    {
        return $this->lastRequestID;
    }

    /**
     * Generates the Signature for a SAML Request
     *
     * @throws Exception
     * @throws Error
     */
    public function buildRequestSignature(string $samlRequest, string $relayState, string $signAlgorithm = XMLSecurityKey::RSA_SHA256): string
    {
        return $this->buildMessageSignature($samlRequest, $relayState, $signAlgorithm, "SAMLRequest");
    }

    /**
     * Generates the Signature for a SAML Response
     *
     * @throws Exception
     * @throws Error
     */
    public function buildResponseSignature(string $samlResponse, string $relayState, string $signAlgorithm = XMLSecurityKey::RSA_SHA256): string
    {
        return $this->buildMessageSignature($samlResponse, $relayState, $signAlgorithm, "SAMLResponse");
    }

    /**
     * Generates the Signature for a SAML Message
     *
     * @throws Exception
     * @throws Error
     */
    private function buildMessageSignature(string $samlMessage, string $relayState, string $signAlgorithm = XMLSecurityKey::RSA_SHA256, string $type = "SAMLRequest"): string
    {
        $key = $this->settings->getSPkey();
        if (empty($key)) {
            if ($type === "SAMLRequest") {
                $errorMsg = "Trying to sign the SAML Request but can't load the SP private key";
            } else {
                $errorMsg = "Trying to sign the SAML Response but can't load the SP private key";
            }

            throw new Error($errorMsg, Error::PRIVATE_KEY_NOT_FOUND);
        }

        $objKey = new XMLSecurityKey($signAlgorithm, ['type' => 'private']);
        $objKey->loadKey($key, false);

        $security = $this->settings->getSecurityData();
        if ($security['lowercaseUrlencoding']) {
            $msg = $type . '=' . rawurlencode($samlMessage);
            if (isset($relayState)) {
                $msg .= '&RelayState=' . rawurlencode($relayState);
            }
            $msg .= '&SigAlg=' . rawurlencode($signAlgorithm);
        } else {
            $msg = $type . '=' . urlencode($samlMessage);
            if (isset($relayState)) {
                $msg .= '&RelayState=' . urlencode($relayState);
            }
            $msg .= '&SigAlg=' . urlencode($signAlgorithm);
        }
        return base64_encode($objKey->signData($msg));
    }

    public function getLastMessageId(): ?string
    {
        return $this->lastMessageId;
    }

    public function getLastAssertionId(): ?string
    {
        return $this->lastAssertionId;
    }

    /**
     * @return int The NotOnOrAfter value of the valid
     *         SubjectConfirmationData node (if any)
     *         of the last assertion processed
     */
    public function getLastAssertionNotOnOrAfter()
    {
        return $this->lastAssertionNotOnOrAfter;
    }
}
